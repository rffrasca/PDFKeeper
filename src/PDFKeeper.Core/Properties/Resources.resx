<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CancelQuestion" xml:space="preserve">
    <value>Are you sure you want to cancel?</value>
  </data>
  <data name="CommonFieldsCannotAllBeBlank" xml:space="preserve">
    <value>Author, Subject, Category, and Tax Year cannot all be blank!</value>
  </data>
  <data name="DateAddedCannotBeBlank" xml:space="preserve">
    <value>Date Added cannot be blank!</value>
  </data>
  <data name="DateTimeToken" xml:space="preserve">
    <value>&lt;Date_Time&gt;</value>
  </data>
  <data name="DateToken" xml:space="preserve">
    <value>&lt;Date&gt;</value>
  </data>
  <data name="DefaultDatabaseExceptionMessage" xml:space="preserve">
    <value>Database Exception has occurred.</value>
  </data>
  <data name="DefaultDocumentException" xml:space="preserve">
    <value>{0}. (Document ID {1})</value>
  </data>
  <data name="DeleteSelectedDocuments" xml:space="preserve">
    <value>Delete selected documents?</value>
  </data>
  <data name="DeleteToRecycleBin" xml:space="preserve">
    <value>Delete {0} to the Recycle Bin?</value>
  </data>
  <data name="DocumentMayHaveBeenDeletedException" xml:space="preserve">
    <value>{0}.  Document ID {1} may have been deleted.</value>
  </data>
  <data name="Export" xml:space="preserve">
    <value>Export</value>
  </data>
  <data name="ExtractAttachments" xml:space="preserve">
    <value>Extract all attachments from the PDF to a ZIP file?
To extract to a folder, select No.</value>
  </data>
  <data name="ExtractEmbeddedFiles" xml:space="preserve">
    <value>Extract all embedded files from the PDF to a ZIP file?
To extract to a folder, select No.</value>
  </data>
  <data name="FileNameInvalid" xml:space="preserve">
    <value>{0} contains % and/or + in the filename which are invalid characters! Rename the file and try again.</value>
  </data>
  <data name="FileNameToken" xml:space="preserve">
    <value>&lt;FileName&gt;</value>
  </data>
  <data name="MandatoryFieldsAreBlank" xml:space="preserve">
    <value>One or more mandatory fields are blank!</value>
  </data>
  <data name="NameCannotBeBlank" xml:space="preserve">
    <value>Name cannot be blank!</value>
  </data>
  <data name="NameContainsCharsNotAllowed" xml:space="preserve">
    <value>Name contains one or more characters not allowed in file names!</value>
  </data>
  <data name="NotesModified" xml:space="preserve">
    <value>Notes for selected document have been modified.
Do you want to save changes before closing?</value>
  </data>
  <data name="NotesSizeTooLarge" xml:space="preserve">
    <value>Notes size in bytes is {0} which is too large. Reduce the size to {1} or less and try saving again.</value>
  </data>
  <data name="OneFindFunctionMustBeTrue" xml:space="preserve">
    <value>One find function must be true!</value>
  </data>
  <data name="OpenCheckedDocumentsMaximumReached" xml:space="preserve">
    <value>More than {0} documents have been selected. Only the PDF for each of the {0} selected documents will be opened.</value>
  </data>
  <data name="OracleOdpNetMissing" xml:space="preserve">
    <value>The required Oracle ODP.NET is missing and needs to be installed.

Please refer to the help file topic "Installing Oracle ODP.NET" in the "Client Setup for Multi-User Database" section for instructions.

PDFKeeper will need to be restarted after completing the install of Oracle ODP.NET.</value>
  </data>
  <data name="PdfContainsUserPassword" xml:space="preserve">
    <value>PDF contains User password and is not supported.</value>
  </data>
  <data name="PdfFilter" xml:space="preserve">
    <value>PDF files|*.pdf</value>
  </data>
  <data name="PdfInvalid" xml:space="preserve">
    <value>PDF is invalid.</value>
  </data>
  <data name="PdfOwnerPasswordIncorrect" xml:space="preserve">
    <value>PDF Owner password is incorrect.</value>
  </data>
  <data name="PdfOwnerPasswordRequired" xml:space="preserve">
    <value>PDF Owner password required.</value>
  </data>
  <data name="SearchTermCannotBeBlank" xml:space="preserve">
    <value>Search Term cannot be blank!</value>
  </data>
  <data name="SearchTermSyntaxIncorrect" xml:space="preserve">
    <value>Search Term contains improper usage of query operators and/or characters!</value>
  </data>
  <data name="SelectBurstFolder" xml:space="preserve">
    <value>Select the folder location where to burst the PDF for the selected document:
PDF file names will be prefixed with: PDFKeeper&lt;ID&gt;_</value>
  </data>
  <data name="SelectExportFolder" xml:space="preserve">
    <value>Select the folder location where the export folder structure will be created:</value>
  </data>
  <data name="SelectExtractFolder" xml:space="preserve">
    <value>Select the folder location where to extract all PDF attachments for the selected document:</value>
  </data>
  <data name="TextFilter" xml:space="preserve">
    <value>Text files|*.txt</value>
  </data>
  <data name="UnableToSaveNotes" xml:space="preserve">
    <value>The changes you made to the Notes text box cannot be saved and have been lost because another user has updated the Notes for the same record.

The contents of the Notes text box prior to the attempted save operation have been copied to the Clipboard.</value>
  </data>
  <data name="Upload" xml:space="preserve">
    <value>Upload</value>
  </data>
  <data name="UploadProfileExists" xml:space="preserve">
    <value>Upload Profile already exists!</value>
  </data>
  <data name="ZipFilter" xml:space="preserve">
    <value>ZIP files|*.zip</value>
  </data>
</root>